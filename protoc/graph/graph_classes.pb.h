// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph_classes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_5fclasses_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_5fclasses_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_5fclasses_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_5fclasses_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_5fclasses_2eproto;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Relationship;
class RelationshipDefaultTypeInternal;
extern RelationshipDefaultTypeInternal _Relationship_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Node* Arena::CreateMaybeMessage<::Node>(Arena*);
template<> ::Relationship* Arena::CreateMaybeMessage<::Relationship>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Node) */ {
 public:
  inline Node() : Node(nullptr) {};
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_5fclasses_2eproto);
    return ::descriptor_table_graph_5fclasses_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsInUseFieldNumber = 1,
    kLabelFieldNumber = 5,
    kRemainingByteFieldNumber = 6,
    kIdFieldNumber = 2,
    kFirstRelationshipIdFieldNumber = 3,
    kFirstPropertyIdFieldNumber = 4,
  };
  // string is_in_use = 1;
  void clear_is_in_use();
  const std::string& is_in_use() const;
  void set_is_in_use(const std::string& value);
  void set_is_in_use(std::string&& value);
  void set_is_in_use(const char* value);
  void set_is_in_use(const char* value, size_t size);
  std::string* mutable_is_in_use();
  std::string* release_is_in_use();
  void set_allocated_is_in_use(std::string* is_in_use);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_is_in_use();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_is_in_use(
      std::string* is_in_use);
  private:
  const std::string& _internal_is_in_use() const;
  void _internal_set_is_in_use(const std::string& value);
  std::string* _internal_mutable_is_in_use();
  public:

  // string label = 5;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string remaining_byte = 6;
  void clear_remaining_byte();
  const std::string& remaining_byte() const;
  void set_remaining_byte(const std::string& value);
  void set_remaining_byte(std::string&& value);
  void set_remaining_byte(const char* value);
  void set_remaining_byte(const char* value, size_t size);
  std::string* mutable_remaining_byte();
  std::string* release_remaining_byte();
  void set_allocated_remaining_byte(std::string* remaining_byte);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_remaining_byte();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_remaining_byte(
      std::string* remaining_byte);
  private:
  const std::string& _internal_remaining_byte() const;
  void _internal_set_remaining_byte(const std::string& value);
  std::string* _internal_mutable_remaining_byte();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 first_relationship_id = 3;
  void clear_first_relationship_id();
  ::PROTOBUF_NAMESPACE_ID::int32 first_relationship_id() const;
  void set_first_relationship_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_first_relationship_id() const;
  void _internal_set_first_relationship_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 first_property_id = 4;
  void clear_first_property_id();
  ::PROTOBUF_NAMESPACE_ID::int32 first_property_id() const;
  void set_first_property_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_first_property_id() const;
  void _internal_set_first_property_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr is_in_use_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remaining_byte_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_relationship_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 first_property_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_5fclasses_2eproto;
};
// -------------------------------------------------------------------

class Relationship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Relationship) */ {
 public:
  inline Relationship() : Relationship(nullptr) {};
  virtual ~Relationship();

  Relationship(const Relationship& from);
  Relationship(Relationship&& from) noexcept
    : Relationship() {
    *this = ::std::move(from);
  }

  inline Relationship& operator=(const Relationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline Relationship& operator=(Relationship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Relationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Relationship* internal_default_instance() {
    return reinterpret_cast<const Relationship*>(
               &_Relationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Relationship& a, Relationship& b) {
    a.Swap(&b);
  }
  inline void Swap(Relationship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Relationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Relationship* New() const final {
    return CreateMaybeMessage<Relationship>(nullptr);
  }

  Relationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Relationship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Relationship& from);
  void MergeFrom(const Relationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Relationship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Relationship";
  }
  protected:
  explicit Relationship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_5fclasses_2eproto);
    return ::descriptor_table_graph_5fclasses_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationshipTypeFieldNumber = 3,
    kStartNodeIdFieldNumber = 1,
    kEndNodeIdFieldNumber = 2,
  };
  // string relationship_type = 3;
  void clear_relationship_type();
  const std::string& relationship_type() const;
  void set_relationship_type(const std::string& value);
  void set_relationship_type(std::string&& value);
  void set_relationship_type(const char* value);
  void set_relationship_type(const char* value, size_t size);
  std::string* mutable_relationship_type();
  std::string* release_relationship_type();
  void set_allocated_relationship_type(std::string* relationship_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_relationship_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_relationship_type(
      std::string* relationship_type);
  private:
  const std::string& _internal_relationship_type() const;
  void _internal_set_relationship_type(const std::string& value);
  std::string* _internal_mutable_relationship_type();
  public:

  // int32 start_node_id = 1;
  void clear_start_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 start_node_id() const;
  void set_start_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_node_id() const;
  void _internal_set_start_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_node_id = 2;
  void clear_end_node_id();
  ::PROTOBUF_NAMESPACE_ID::int32 end_node_id() const;
  void set_end_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_node_id() const;
  void _internal_set_end_node_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Relationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relationship_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_5fclasses_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// string is_in_use = 1;
inline void Node::clear_is_in_use() {
  is_in_use_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Node::is_in_use() const {
  // @@protoc_insertion_point(field_get:Node.is_in_use)
  return _internal_is_in_use();
}
inline void Node::set_is_in_use(const std::string& value) {
  _internal_set_is_in_use(value);
  // @@protoc_insertion_point(field_set:Node.is_in_use)
}
inline std::string* Node::mutable_is_in_use() {
  // @@protoc_insertion_point(field_mutable:Node.is_in_use)
  return _internal_mutable_is_in_use();
}
inline const std::string& Node::_internal_is_in_use() const {
  return is_in_use_.Get();
}
inline void Node::_internal_set_is_in_use(const std::string& value) {
  
  is_in_use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Node::set_is_in_use(std::string&& value) {
  
  is_in_use_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Node.is_in_use)
}
inline void Node::set_is_in_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  is_in_use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Node.is_in_use)
}
inline void Node::set_is_in_use(const char* value,
    size_t size) {
  
  is_in_use_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Node.is_in_use)
}
inline std::string* Node::_internal_mutable_is_in_use() {
  
  return is_in_use_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Node::release_is_in_use() {
  // @@protoc_insertion_point(field_release:Node.is_in_use)
  return is_in_use_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_is_in_use(std::string* is_in_use) {
  if (is_in_use != nullptr) {
    
  } else {
    
  }
  is_in_use_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), is_in_use,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Node.is_in_use)
}
inline std::string* Node::unsafe_arena_release_is_in_use() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Node.is_in_use)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return is_in_use_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Node::unsafe_arena_set_allocated_is_in_use(
    std::string* is_in_use) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (is_in_use != nullptr) {
    
  } else {
    
  }
  is_in_use_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      is_in_use, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Node.is_in_use)
}

// int32 id = 2;
inline void Node::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::id() const {
  // @@protoc_insertion_point(field_get:Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Node::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Node.id)
}

// int32 first_relationship_id = 3;
inline void Node::clear_first_relationship_id() {
  first_relationship_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_first_relationship_id() const {
  return first_relationship_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::first_relationship_id() const {
  // @@protoc_insertion_point(field_get:Node.first_relationship_id)
  return _internal_first_relationship_id();
}
inline void Node::_internal_set_first_relationship_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  first_relationship_id_ = value;
}
inline void Node::set_first_relationship_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_first_relationship_id(value);
  // @@protoc_insertion_point(field_set:Node.first_relationship_id)
}

// int32 first_property_id = 4;
inline void Node::clear_first_property_id() {
  first_property_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::_internal_first_property_id() const {
  return first_property_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Node::first_property_id() const {
  // @@protoc_insertion_point(field_get:Node.first_property_id)
  return _internal_first_property_id();
}
inline void Node::_internal_set_first_property_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  first_property_id_ = value;
}
inline void Node::set_first_property_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_first_property_id(value);
  // @@protoc_insertion_point(field_set:Node.first_property_id)
}

// string label = 5;
inline void Node::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Node::label() const {
  // @@protoc_insertion_point(field_get:Node.label)
  return _internal_label();
}
inline void Node::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:Node.label)
}
inline std::string* Node::mutable_label() {
  // @@protoc_insertion_point(field_mutable:Node.label)
  return _internal_mutable_label();
}
inline const std::string& Node::_internal_label() const {
  return label_.Get();
}
inline void Node::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Node::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Node.label)
}
inline void Node::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Node.label)
}
inline void Node::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Node.label)
}
inline std::string* Node::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Node::release_label() {
  // @@protoc_insertion_point(field_release:Node.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Node.label)
}
inline std::string* Node::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Node.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Node::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    
  } else {
    
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Node.label)
}

// string remaining_byte = 6;
inline void Node::clear_remaining_byte() {
  remaining_byte_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Node::remaining_byte() const {
  // @@protoc_insertion_point(field_get:Node.remaining_byte)
  return _internal_remaining_byte();
}
inline void Node::set_remaining_byte(const std::string& value) {
  _internal_set_remaining_byte(value);
  // @@protoc_insertion_point(field_set:Node.remaining_byte)
}
inline std::string* Node::mutable_remaining_byte() {
  // @@protoc_insertion_point(field_mutable:Node.remaining_byte)
  return _internal_mutable_remaining_byte();
}
inline const std::string& Node::_internal_remaining_byte() const {
  return remaining_byte_.Get();
}
inline void Node::_internal_set_remaining_byte(const std::string& value) {
  
  remaining_byte_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Node::set_remaining_byte(std::string&& value) {
  
  remaining_byte_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Node.remaining_byte)
}
inline void Node::set_remaining_byte(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remaining_byte_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Node.remaining_byte)
}
inline void Node::set_remaining_byte(const char* value,
    size_t size) {
  
  remaining_byte_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Node.remaining_byte)
}
inline std::string* Node::_internal_mutable_remaining_byte() {
  
  return remaining_byte_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Node::release_remaining_byte() {
  // @@protoc_insertion_point(field_release:Node.remaining_byte)
  return remaining_byte_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_remaining_byte(std::string* remaining_byte) {
  if (remaining_byte != nullptr) {
    
  } else {
    
  }
  remaining_byte_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remaining_byte,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Node.remaining_byte)
}
inline std::string* Node::unsafe_arena_release_remaining_byte() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Node.remaining_byte)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return remaining_byte_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Node::unsafe_arena_set_allocated_remaining_byte(
    std::string* remaining_byte) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (remaining_byte != nullptr) {
    
  } else {
    
  }
  remaining_byte_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      remaining_byte, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Node.remaining_byte)
}

// -------------------------------------------------------------------

// Relationship

// int32 start_node_id = 1;
inline void Relationship::clear_start_node_id() {
  start_node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Relationship::_internal_start_node_id() const {
  return start_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Relationship::start_node_id() const {
  // @@protoc_insertion_point(field_get:Relationship.start_node_id)
  return _internal_start_node_id();
}
inline void Relationship::_internal_set_start_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_node_id_ = value;
}
inline void Relationship::set_start_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_node_id(value);
  // @@protoc_insertion_point(field_set:Relationship.start_node_id)
}

// int32 end_node_id = 2;
inline void Relationship::clear_end_node_id() {
  end_node_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Relationship::_internal_end_node_id() const {
  return end_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Relationship::end_node_id() const {
  // @@protoc_insertion_point(field_get:Relationship.end_node_id)
  return _internal_end_node_id();
}
inline void Relationship::_internal_set_end_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_node_id_ = value;
}
inline void Relationship::set_end_node_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_node_id(value);
  // @@protoc_insertion_point(field_set:Relationship.end_node_id)
}

// string relationship_type = 3;
inline void Relationship::clear_relationship_type() {
  relationship_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Relationship::relationship_type() const {
  // @@protoc_insertion_point(field_get:Relationship.relationship_type)
  return _internal_relationship_type();
}
inline void Relationship::set_relationship_type(const std::string& value) {
  _internal_set_relationship_type(value);
  // @@protoc_insertion_point(field_set:Relationship.relationship_type)
}
inline std::string* Relationship::mutable_relationship_type() {
  // @@protoc_insertion_point(field_mutable:Relationship.relationship_type)
  return _internal_mutable_relationship_type();
}
inline const std::string& Relationship::_internal_relationship_type() const {
  return relationship_type_.Get();
}
inline void Relationship::_internal_set_relationship_type(const std::string& value) {
  
  relationship_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Relationship::set_relationship_type(std::string&& value) {
  
  relationship_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Relationship.relationship_type)
}
inline void Relationship::set_relationship_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relationship_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Relationship.relationship_type)
}
inline void Relationship::set_relationship_type(const char* value,
    size_t size) {
  
  relationship_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Relationship.relationship_type)
}
inline std::string* Relationship::_internal_mutable_relationship_type() {
  
  return relationship_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Relationship::release_relationship_type() {
  // @@protoc_insertion_point(field_release:Relationship.relationship_type)
  return relationship_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Relationship::set_allocated_relationship_type(std::string* relationship_type) {
  if (relationship_type != nullptr) {
    
  } else {
    
  }
  relationship_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relationship_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Relationship.relationship_type)
}
inline std::string* Relationship::unsafe_arena_release_relationship_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Relationship.relationship_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return relationship_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Relationship::unsafe_arena_set_allocated_relationship_type(
    std::string* relationship_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (relationship_type != nullptr) {
    
  } else {
    
  }
  relationship_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      relationship_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Relationship.relationship_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_5fclasses_2eproto
